import os
import re, sys
import json
import base64
import logging
import random
import asyncio
import time
import pytz
from database.verify_db import vr_db
from .pmfilter import auto_filter 
from Script import script
from datetime import datetime
from database.refer import referdb
from database.config_db import mdb
from pyrogram import Client, filters, enums
from pyrogram.errors import FloodWait
from pyrogram.types import *
from database.ia_filterdb import Media, Media2, get_file_details, unpack_new_file_id, get_bad_files
from database.users_chats_db import db, delete_all_msg
from utils import *
from database.connections_mdb import active_connection

# Set up logging
logging.basicConfig(level=logging.ERROR)
logger = logging.getLogger(__name__)

TIMEZONE = "Asia/Kolkata"
BATCH_FILES = {}

# Default reactions list since info.py is not available
REACTIONS = ["‚ù§Ô∏è", "üëç", "üî•", "üéâ", "üòç"]

@Client.on_message(filters.command("start") & filters.incoming)
async def start(client, message):
    # Add reaction emoji directly without checking EMOJI_MODE
    await message.react(emoji=random.choice(REACTIONS), big=True) 
    if message.chat.type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        buttons = [[
                    InlineKeyboardButton('‚Ä¢ ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è ·¥ú Ä ·¥Ñ ú·¥Ä·¥õ ‚Ä¢', url=f'http://t.me/{temp.U_NAME}?startgroup=true')
                ],[
                    InlineKeyboardButton('‚Ä¢ ·¥ç·¥Äs·¥õ·¥á Ä ‚Ä¢', url="https://t.me/cosmic_freak"),
                    InlineKeyboardButton('‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢', url='https://t.me/codeflixsupport')
                ],[
                    InlineKeyboardButton('‚Ä¢ ·¥ä·¥è…™…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ·¥Ñ ú·¥Ä…¥…¥·¥á ü ‚Ä¢', url="https://t.me/codeflix_bots")
                  ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await message.reply(script.GSTART_TXT.format(message.from_user.mention if message.from_user else message.chat.title, temp.U_NAME, temp.B_NAME), reply_markup=reply_markup, disable_web_page_preview=True)
        await asyncio.sleep(2) 
        if not await db.get_chat(message.chat.id):
            total=await client.get_chat_members_count(message.chat.id)
            await client.send_message(LOG_CHANNEL, script.LOG_TEXT_G.format(message.chat.title, message.chat.id, total, "Unknown"))       
            await db.add_chat(message.chat.id, message.chat.title)
        return 
    if not await db.is_user_exist(message.from_user.id):
        await db.add_user(message.from_user.id, message.from_user.first_name)
        await client.send_message(LOG_CHANNEL, script.LOG_TEXT_P.format(message.from_user.id, message.from_user.mention))
    if len(message.command) != 2:
        buttons = [[
                    InlineKeyboardButton(text="üè°", callback_data="start"),
                    InlineKeyboardButton(text="üõ°", callback_data="group_info"),
                    InlineKeyboardButton(text="üí≥", callback_data="about"),
                    InlineKeyboardButton(text="üí∏", callback_data="shortlink_info"),
                    InlineKeyboardButton(text="üñ•", callback_data="main"),
                ],[
                    InlineKeyboardButton('·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò', url=f'http://t.me/{temp.U_NAME}?startgroup=true')
                ],[
                    InlineKeyboardButton('‚Ä¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ‚Ä¢', callback_data='main'),
                    InlineKeyboardButton('‚Ä¢ ·¥á·¥Ä Ä…¥ ·¥ç·¥è…¥·¥á è ‚Ä¢', callback_data='shortlink_info')
                ],[
                    InlineKeyboardButton('‚Ä¢ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ‚Ä¢', callback_data='premium_info'),
                    InlineKeyboardButton('‚Ä¢ ·¥Ä ô·¥è·¥ú·¥õ ‚Ä¢', callback_data='about')
                  ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        current_time = datetime.now(pytz.timezone(TIMEZONE))
        curr_time = current_time.hour        
        if curr_time < 12:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
        elif curr_time < 17:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
        elif curr_time < 21:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
        else:
            gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"
        m=await message.reply_text("<i>·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è <b> ü·¥ú·¥Ñ è</b>.\n ú·¥è·¥ò·¥á  è·¥è·¥ú' Ä·¥á ·¥Ö·¥è…™…¥…¢ ·¥°·¥á ü ü...</i>")
        await asyncio.sleep(0.4)
        await m.edit_text("‚è≥")
        await asyncio.sleep(0.5)
        await m.edit_text("üëÄ")
        await asyncio.sleep(0.5)
        await m.edit_text("<b><i>Íú±·¥õ·¥Ä Ä·¥õ…™…¥…¢...</i></b>")
        await asyncio.sleep(0.4)
        await m.delete()        
        m=await message.reply_sticker("CAACAgUAAxkBAAJFeWd037UWP-vgb_dWo55DCPZS9zJzAAJpEgACqXaJVxBrhzahNnwSHgQ") 
        await asyncio.sleep(1)
        await m.delete()
        await message.reply_photo(
            photo=random.choice(PICS),
            caption=script.START_TXT.format(message.from_user.mention, gtxt, temp.U_NAME, temp.B_NAME),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        return
    
    if not await db.has_premium_access(message.from_user.id):
        channels = (await get_settings(int(message.from_user.id))).get('fsub')
        if channels:  
            btn = await is_subscribed(client, message, channels)
            if btn:
                kk, file_id = message.command[1].split("_", 1)
                btn.append([InlineKeyboardButton("·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥", callback_data=f"checksub#{kk}#{file_id}")])
                reply_markup = InlineKeyboardMarkup(btn)
                caption = (
                    f"**·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä…¥·¥Ö ·¥õ ú·¥á…¥ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ·¥õ·¥è …¢·¥á·¥õ  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥áÍú±·¥õ·¥á·¥Ö Íú∞…™ ü·¥á.**"
                )
                await message.reply_photo(
                    photo=random.choice(FSUB_PICS),
                    caption=caption,
                    reply_markup=reply_markup,
                    parse_mode=enums.ParseMode.HTML
                )
                return
       
    if len(message.command) == 2 and message.command[1] in ["subscribe", "error", "okay", "help"]:
        buttons = [[
                    InlineKeyboardButton(text="üè°", callback_data="start"),
                    InlineKeyboardButton(text="üõ°", callback_data="group_info"),
                    InlineKeyboardButton(text="üí≥", callback_data="about"),
                    InlineKeyboardButton(text="üí∏", callback_data="shortlink_info"),
                    InlineKeyboardButton(text="üñ•", callback_data="main"),
                ],[
                    InlineKeyboardButton('·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò', url=f'http://t.me/{temp.U_NAME}?startgroup=true')
                ],[
                    InlineKeyboardButton('‚Ä¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ‚Ä¢', callback_data='main'),
                    InlineKeyboardButton('‚Ä¢ ·¥á·¥Ä Ä…¥ ·¥ç·¥è…¥·¥á è ‚Ä¢', callback_data='shortlink_info')
                ],[
                    InlineKeyboardButton('‚Ä¢ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ‚Ä¢', callback_data='premium_info'),
                    InlineKeyboardButton('‚Ä¢ ·¥Ä ô·¥è·¥ú·¥õ ‚Ä¢', callback_data='about')
                  ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        current_time = datetime.now(pytz.timezone(TIMEZONE))
        curr_time = current_time.hour        
        if curr_time < 12:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
        elif curr_time < 17:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
        elif curr_time < 21:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
        else:
            gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"
        m=await message.reply_text(" ú·¥á ü ü·¥è  ô·¥Ä ô è,  ú·¥è·¥° ·¥Ä Ä·¥á  è·¥è·¥ú \n·¥°·¥Ä…™·¥õ ·¥Ä ·¥ç·¥è·¥ç·¥á…¥·¥õ  ô·¥Ä ô è . . .")
        await asyncio.sleep(0.4)
        await m.edit_text("üéä")
        await asyncio.sleep(0.5)
        await m.edit_text("‚ö°")
        await asyncio.sleep(0.5)
        await m.edit_text("Íú±·¥õ·¥Ä Ä·¥õ…™…¥…¢  ô·¥Ä ô è...")
        await asyncio.sleep(0.4)
        await m.delete()        
        m=await message.reply_sticker("CAACAgUAAxkBAAECroBmQKMAAQ-Gw4nibWoj_pJou2vP1a4AAlQIAAIzDxlVkNBkTEb1Lc4eBA") 
        await asyncio.sleep(1)
        await m.delete()
        await message.reply_photo(
            photo=random.choice(PICS),
            caption=script.START_TXT.format(message.from_user.mention, gtxt, temp.U_NAME, temp.B_NAME),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        return
    if message.command[1].startswith("reff_"):
        try:
            user_id = int(message.command[1].split("_")[1])
        except ValueError:
            await message.reply_text("Invalid refer!")
            return
        if user_id == message.from_user.id:
            await message.reply_text("H·¥á è D·¥ú·¥Ö·¥á, Y·¥è·¥ú C·¥Ä…¥'·¥õ R·¥á“ì·¥á Ä Y·¥è·¥ú Äs·¥á ü“ì ü§£!\n\ns ú·¥Ä Ä·¥á  ü…™…¥·¥ã  è·¥è·¥ú Ä “ì Ä…™·¥á…¥·¥Ö ·¥Ä…¥·¥Ö …¢·¥á·¥õ 10  Ä·¥á“ì·¥á Ä Ä·¥Ä ü ·¥ò·¥è…™…¥·¥õ …™“ì  è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ñ·¥è ü ü·¥á·¥Ñ·¥õ…™…¥…¢ 100  Ä·¥á“ì·¥á Ä Ä·¥Ä ü ·¥ò·¥è…™…¥·¥õs ·¥õ ú·¥á…¥  è·¥è·¥ú ·¥Ñ·¥Ä…¥ …¢·¥á·¥õ 1 ·¥ç·¥è…¥·¥õ ú “ì Ä·¥á·¥á ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ç·¥á·¥ç ô·¥á Äs ú…™·¥ò.")
            return
        if referdb.is_user_in_list(message.from_user.id):
            await message.reply_text("Y·¥è·¥ú  ú·¥Ä·¥†·¥á  ô·¥á·¥á…¥ ·¥Ä ü Ä·¥á·¥Ä·¥Ö è …™…¥·¥†…™·¥õ·¥á·¥Ö ‚ùó")
            return
        try:
            uss = await client.get_users(user_id)
        except Exception:
            return 	    
        referdb.add_user(message.from_user.id)
        fromuse = referdb.get_refer_points(user_id) + 10
        if fromuse == 100:
            referdb.add_refer_points(user_id, 0) 
            await message.reply_text(f"üéâ ùóñùóºùóªùó¥ùóøùóÆùòÅùòÇùóπùóÆùòÅùó∂ùóºùóªùòÄ! ùó¨ùóºùòÇ ùòÑùóºùóª ùü≠ùü¨ ùó•ùó≤ùó≥ùó≤ùóøùóøùóÆùóπ ùóΩùóºùó∂ùóªùòÅ ùóØùó≤ùó∞ùóÆùòÇùòÄùó≤ ùó¨ùóºùòÇ ùóµùóÆùòÉùó≤ ùóØùó≤ùó≤ùóª ùó¶ùòÇùó∞ùó∞ùó≤ùòÄùòÄùó≥ùòÇùóπùóπùòÜ ùóúùóªùòÉùó∂ùòÅùó≤ùó± ‚òû {uss.mention}!")		    
            await message.reply_text(user_id, f"You have been successfully invited by {message.from_user.mention}!") 	
            seconds = 2592000
            if seconds > 0:
                expiry_time = datetime.datetime.now() + datetime.timedelta(seconds=seconds)
                user_data = {"id": user_id, "expiry_time": expiry_time}  # Using "id" instead of "user_id"  
                await db.update_user(user_data)  # Use the update_user method to update or insert user data		    
                await client.send_message(
                chat_id=user_id,
                text=f"<b>H·¥á è {uss.mention}\n\nY·¥è·¥ú …¢·¥è·¥õ 1 ·¥ç·¥è…¥·¥õ ú ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥  ô è …™…¥·¥†…™·¥õ…™…¥…¢ 10 ·¥ús·¥á Äs ‚ùó", disable_web_page_preview=True              
                )
            for admin in ADMINS:
                await client.send_message(chat_id=admin, text=f"S·¥ú·¥Ñ·¥Ñ·¥áss “ì·¥ú ü ü è ·¥õ·¥Äs·¥ã ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö  ô è ·¥õ ú…™s ·¥ús·¥á Ä:\n\nuser N·¥Ä·¥ç·¥á: {uss.mention}\n\nUs·¥á Ä …™·¥Ö: {uss.id}!")	
        else:
            referdb.add_refer_points(user_id, fromuse)
            await message.reply_text(f"You have been successfully invited by {uss.mention}!")
            await client.send_message(user_id, f"ùóñùóºùóªùó¥ùóøùóÆùòÅùòÇùóπùóÆùòÅùó∂ùóºùóªùòÄ! ùó¨ùóºùòÇ ùòÑùóºùóª ùü≠ùü¨ ùó•ùó≤ùó≥ùó≤ùóøùóøùóÆùóπ ùóΩùóºùó∂ùóªùòÅ ùóØùó≤ùó∞ùóÆùòÇùòÄùó≤ ùó¨ùóºùòÇ ùóµùóÆùòÉùó≤ ùóØùó≤ùó≤ùóª ùó¶ùòÇùó∞ùó∞ùó≤ùòÄùòÄùó≥ùòÇùóπùóπùòÜ ùóúùóªùòÉùó∂ùòÅùó≤ùó± ‚òû{message.from_user.mention}!")
        return
        
    if len(message.command) == 2 and message.command[1] in ["premium"]:
        buttons = [[
                    InlineKeyboardButton('üì≤ Íú±·¥á…¥·¥Ö ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ Íú±·¥Ñ Ä·¥á·¥á…¥Íú± ú·¥è·¥õ', url=OWNER_LNK)
                  ],[
                    InlineKeyboardButton('‚ùå ·¥Ñ ü·¥èÍú±·¥á ‚ùå', callback_data='close_data')
                  ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await message.reply_photo(
            photo=(SUBSCRIPTION),
            caption=script.PREPLANS_TXT.format(message.from_user.mention, OWNER_UPI_ID, QR_CODE),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        return  
    if len(message.command) == 2 and message.command[1].startswith('getfile'):
        movies = message.command[1].split("-", 1)[1] 
        movie = movies.replace('-',' ')
        message.text = movie 
        await auto_filter(client, message) 
        return
    
    data = message.command[1]
    try:
        pre, file_id = data.split('_', 1)
    except:
        file_id = data
        pre = ""

    if data.split("-", 1)[0] == "BATCH":
        sts = await message.reply("<b>Please wait...</b>")
        file_id = data.split("-", 1)[1]
        msgs = BATCH_FILES.get(file_id)
        if not msgs:
            file = await client.download_media(file_id)
            try:
                with open(file) as file_data:
                    msgs = json.loads(file_data.read())
            except:
                await sts.edit("FAILED")
                return await client.send_message(LOG_CHANNEL, "UNABLE TO OPEN FILE.")
            os.remove(file)
            BATCH_FILES[file_id] = msgs

        for msg in msgs:
            title = msg.get("title")
            size = get_size(int(msg.get("size", 0)))
            f_caption = msg.get("caption", "")

            if BATCH_FILE_CAPTION:
                try:
                    f_caption = BATCH_FILE_CAPTION.format(file_name='' if title is None else title, file_size='' if size is None else size, file_caption='' if f_caption is None else f_caption)
                except Exception as e:
                    logger.exception(e)
                    f_caption = f_caption

            if f_caption is None:
                f_caption = f"{title}"

            if STREAM_MODE:
                btn = [
                    [InlineKeyboardButton('üöÄ Íú∞·¥ÄÍú±·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö / ·¥°·¥Ä·¥õ·¥Ñ ú ·¥è…¥ ü…™…¥·¥á üñ•Ô∏è', callback_data=f'generate_stream_link:{file_id}')],
                    [InlineKeyboardButton('üìå ·¥ä·¥è…™…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ·¥Ñ ú·¥Ä…¥…¥·¥á ü üìå', url=MOVIE_UPDATE_CHANNEL_LNK)]  # Keep this line unchanged
                ]
            else:
                btn = [
                    [InlineKeyboardButton('üìå ·¥ä·¥è…™…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ·¥Ñ ú·¥Ä…¥…¥·¥á ü üìå', url=MOVIE_UPDATE_CHANNEL_LNK)]
                ]
            try:
                await client.send_cached_media(
                    chat_id=message.from_user.id,
                    file_id=msg.get("file_id"),
                    caption=f_caption,
                    protect_content=msg.get('protect', False),
                    reply_markup=InlineKeyboardMarkup(btn)
                )
            except FloodWait as e:
                await asyncio.sleep(e.x)
                logger.warning(f"Floodwait of {e.x} sec.")
                await client.send_cached_media(
                    chat_id=message.from_user.id,
                    file_id=msg.get("file_id"),
                    caption=f_caption,
                    protect_content=msg.get('protect', False),
                    reply_markup=InlineKeyboardMarkup(btn)
                )
            except Exception as e:
                logger.warning(e, exc_info=True)
                continue
            await asyncio.sleep(1)

        await sts.delete()
        return


    elif data.split("-", 1)[0] == "DSTORE":
        sts = await message.reply("<b>Please wait...</b>")
        b_string = data.split("-", 1)[1]
        decoded = (base64.urlsafe_b64decode(b_string + "=" * (-len(b_string) % 4))).decode("ascii")
        try:
            f_msg_id, l_msg_id, f_chat_id, protect = decoded.split("_", 3)
        except:
            f_msg_id, l_msg_id, f_chat_id = decoded.split("_", 2)
            protect = "/pbatch" if PROTECT_CONTENT else "batch"
        diff = int(l_msg_id) - int(f_msg_id)
        async for msg in client.iter_messages(int(f_chat_id), int(l_msg_id), int(f_msg_id)):
            if msg.media:
                media = getattr(msg, msg.media.value)
                if BATCH_FILE_CAPTION:
                    try:
                        f_caption=BATCH_FILE_CAPTION.format(file_name=getattr(media, 'file_name', ''), file_size=getattr(media, 'file_size', ''), file_caption=getattr(msg, 'caption', ''))
                    except Exception as e:
                        logger.exception(e)
                        f_caption = getattr(msg, 'caption', '')
                else:
                    media = getattr(msg, msg.media.value)
                    file_name = getattr(media, 'file_name', '')
                    f_caption = getattr(msg, 'caption', file_name)
                try:
                    await msg.copy(message.chat.id, caption=f_caption, protect_content=True if protect == "/pbatch" else False)
                except FloodWait as e:
                    await asyncio.sleep(e.x)
                    await msg.copy(message.chat.id, caption=f_caption, protect_content=True if protect == "/pbatch" else False)
                except Exception as e:
                    logger.exception(e)
                    continue
            elif msg.empty:
                continue
            else:
                try:
                    await msg.copy(message.chat.id, protect_content=True if protect == "/pbatch" else False)
                except FloodWait as e:
                    await asyncio.sleep(e.x)
                    await msg.copy(message.chat.id, protect_content=True if protect == "/pbatch" else False)
                except Exception as e:
                    logger.exception(e)
                    continue
            await asyncio.sleep(1) 
        return await sts.delete()

    elif data.split("-", 1)[0] == "verify":
        userid = data.split("-", 2)[1]
        token = data.split("-", 3)[2] 
        fileid = data.split("-", 3)[3]
        if str(message.from_user.id) != str(userid):
            return await message.reply_text(
                text="<b>Invalid link or Expired link !</b>",
                protect_content=False
            )
        is_valid = await check_token(client, userid, token)
        if is_valid == True:
            btn = [[
                InlineKeyboardButton("·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è …¢·¥á·¥õ “ì…™ ü·¥á", url=f"https://telegram.me/{temp.U_NAME}?start=files_{fileid}")
            ]]
            await message.reply_photo(
                photo="https://graph.org/file/6928de1539e2e80e47fb8.jpg",
                caption=f"<blockquote><b>üëã  ú·¥á è {message.from_user.mention},  è·¥è·¥ú' Ä·¥á ·¥Ä Ä·¥á Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥†·¥á Ä…™Íú∞…™·¥á·¥Ö ‚úÖ\n\n…¥·¥è·¥°  è·¥è·¥ú'·¥†·¥á ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥áÍú±Íú± “ì·¥è Ä {VERIFY_EXPIRE}  ú·¥è·¥ú Äsüéâ</blockquote></b>",
                reply_markup=InlineKeyboardMarkup(btn)
            )
            await verify_user(client, userid, token) 
            await vr_db.save_verification(message.from_user.id) 
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            current_date = now.strftime("%Y-%m-d")
            
            lucy_message = (
                f"Name: {message.from_user.mention}\n"
                f"Time: {current_time}\n"
                f"Date: {current_date}\n"
                f"#verify_completed"
            )
            await client.send_message(chat_id=VERIFIED_LOG, text=lucy_message)

        else:
            return await message.reply_text(
                text="<b>Invalid link or Expired link !</b>",
                protect_content=False
            )
    if data.startswith("sendfiles"):
        current_time = datetime.now(pytz.timezone(TIMEZONE))
        curr_time = current_time.hour        
        if curr_time < 12:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
        elif curr_time < 17:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
        elif curr_time < 21:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
        else:
            gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"
        chat_id = int("-" + file_id.split("-")[1])
        userid = message.from_user.id if message.from_user else None
        g = await get_shortlink(chat_id, f"https://telegram.me/{temp.U_NAME}?start=allfiles_{file_id}")
        k = await client.send_message(chat_id=message.from_user.id,text=f"ü´Ç  ú·¥á è {message.from_user.mention}, {gtxt}\n\n‚ÄºÔ∏è …¢·¥á·¥õ ·¥Ä ü ü Íú∞…™ ü·¥áÍú± …™…¥ ·¥Ä Íú±…™…¥…¢ ü·¥á  ü…™…¥·¥ã ‚ÄºÔ∏è\n\n‚úÖ  è·¥è·¥ú Ä  ü…™…¥·¥ã …™Íú±  Ä·¥á·¥Ä·¥Ö è, ·¥ã…™…¥·¥Ö ü è ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ô·¥ú·¥õ·¥õ·¥è…¥.\n\n<u>‚ö†Ô∏è …¥·¥è·¥õ·¥á :- ·¥õ ú…™Íú± ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á …™Íú± ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥ 5 ·¥ç…™…¥·¥ú·¥õ·¥áÍú± ·¥õ·¥è ·¥Ä·¥†·¥è…™·¥Ö ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ..Íú±·¥Ä·¥†·¥á ·¥õ ú…™Íú±  ü…™…¥·¥ã ·¥õ·¥è Íú±·¥è·¥ç·¥á·¥° ú·¥á Ä·¥á ·¥á üÍú±·¥á</u>", reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton('üìÅ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üìÅ', url=g)
                    ], [
                        InlineKeyboardButton('‚ö°  ú·¥è·¥° ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚ö°', url=await get_tutorial(chat_id))
                    ]
                ]
            )
        )
        await asyncio.sleep(300)
        await k.edit("<b> è·¥è·¥ú Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á …™Íú± ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö !\n·¥ã…™…¥·¥Ö ü è Íú±·¥á·¥Ä Ä·¥Ñ ú ·¥Ä…¢·¥Ä…™…¥.</b>")
        return
        
    elif data.startswith("short"):
        current_time = datetime.now(pytz.timezone(TIMEZONE))
        curr_time = current_time.hour        
        if curr_time < 12:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
        elif curr_time < 17:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
        elif curr_time < 21:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
        else:
            gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"        
        user_id = message.from_user.id
        if await db.has_premium_access(message.from_user.id):
            pass
        else:
            chat_id = temp.SHORT.get(user_id)
            files_ = await get_file_details(file_id)
            files = files_[0]
            g = await get_shortlink(chat_id, f"https://telegram.me/{temp.U_NAME}?start=file_{file_id}")
            k = await client.send_message(chat_id=user_id,text=f"ü´Ç  ú·¥á è {message.from_user.mention}, {gtxt}\n\n‚úÖ  è·¥è·¥ú Ä  ü…™…¥·¥ã …™Íú±  Ä·¥á·¥Ä·¥Ö è, ·¥ã…™…¥·¥Ö ü è ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ô·¥ú·¥õ·¥õ·¥è…¥.\n\n‚ö†Ô∏è Íú∞…™ ü·¥á …¥·¥Ä·¥ç·¥á : <code>{files.file_name}</code> \n\nüì• Íú∞…™ ü·¥á Íú±…™·¥¢·¥á : <code>{get_size(files.file_size)}</code>\n\n<u>‚ö†Ô∏è …¥·¥è·¥õ·¥á :- ·¥õ ú…™Íú± ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á …™Íú± ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥ 10 ·¥ç…™…¥·¥ú·¥õ·¥áÍú± ·¥õ·¥è ·¥Ä·¥†·¥è…™·¥Ö ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ..Íú±·¥Ä·¥†·¥á ·¥õ ú…™Íú±  ü…™…¥·¥ã ·¥õ·¥è Íú±·¥è·¥ç·¥á·¥° ú·¥á Ä·¥á ·¥á üÍú±·¥á</u>", reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton('üìÅ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üìÅ', url=g)
                        ], [
                            InlineKeyboardButton('‚ö°  ú·¥è·¥° ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚ö°', url=await get_tutorial(chat_id))
                        ]
                    ]
                )
            )
            await asyncio.sleep(600)
            await k.edit("<b> è·¥è·¥ú Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á …™Íú± ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö !\n·¥ã…™…¥·¥Ö ü è Íú±·¥á·¥Ä Ä·¥Ñ ú ·¥Ä…¢·¥Ä…™…¥.</b>")
            return    
    elif data.startswith("all"):
        files = temp.GETALL.get(file_id)
        if not files:
            return await message.reply('<b><i>…¥·¥è Íú±·¥ú·¥Ñ ú ÍúÄ…™ ü·¥á ·¥áx…™Íú±·¥õÍú± !</b></i>')
        filesarr = []
        for file in files:
            file_id = file.file_id
            files_ = await get_file_details(file_id)
            files1 = files_[0]
            title = ' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@') and not x.startswith('www.'), files1.file_name.split()))
            size = get_size(files1.file_size)
            f_caption = files1.caption

            if CUSTOM_FILE_CAPTION:
                try:
                    f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='' if f_caption is None else f_caption)
                except Exception as e:
                    logger.exception(e)
                    f_caption = f_caption

            if f_caption is None:
                f_caption = f"{' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@') and not x.startswith('www.'), files1.file_name.split()))}"
            if await db.has_premium_access(message.from_user.id):
                pass  
            else:
                if not await check_verification(client, message.from_user.id) and VERIFY == True:
                    btn = [[
                       InlineKeyboardButton("·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è ·¥†·¥á Ä…™“ì è", url=await get_token(client, message.from_user.id, f"https://telegram.me/{temp.U_NAME}?start=", file_id))
                       ],[
                       InlineKeyboardButton(" ú·¥è·¥° ·¥õ·¥è ·¥†·¥á Ä…™“ì è", url=HOW_TO_VERIFY)
                   ]]
                    l = await message.reply_text(
                        text=f"<blockquote><b> ú·¥á è  ô Ä·¥è,\n\n ‚ÄºÔ∏è  è·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥†·¥á Ä…™“ì…™·¥á·¥Ö ·¥õ·¥è·¥Ö·¥Ä è ‚ÄºÔ∏è\n\n ‚Ä∫‚Ä∫ ·¥ò ü·¥á·¥Äs·¥á ·¥†·¥á Ä…™“ì è ·¥Ä…¥·¥Ö …¢·¥á·¥õ ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥áss “ì·¥è Ä {VERIFY_EXPIRE}  ú·¥è·¥ú Äs ‚úÖ</blockquote></b>",
                        protect_content=False,
                        reply_markup=InlineKeyboardMarkup(btn)
                    )
                    await asyncio.sleep(180)
                    await l.delete()
                    return
            if STREAM_MODE:
                btn = [
                    [InlineKeyboardButton('üöÄ Íú∞·¥ÄÍú±·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö / ·¥°·¥Ä·¥õ·¥Ñ ú ·¥è…¥ ü…™…¥·¥á üñ•Ô∏è', callback_data=f'generate_stream_link:{file_id}')],
                    [InlineKeyboardButton('üìå ·¥ä·¥è…™…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ·¥Ñ ú·¥Ä…¥…¥·¥á ü üìå', url=MOVIE_UPDATE_CHANNEL_LNK)]  # Keep this line unchanged  
                ]
            else:
                btn = [
                    [InlineKeyboardButton('üìå ·¥ä·¥è…™…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ·¥Ñ ú·¥Ä…¥…¥·¥á ü üìå', url=MOVIE_UPDATE_CHANNEL_LNK)]
                ]

            msg = await client.send_cached_media(
                chat_id=message.from_user.id,
                file_id=file_id,
                caption=f_caption,
                protect_content=True if pre == 'filep' else False,
                reply_markup=InlineKeyboardMarkup(btn)
            )
            filesarr.append(msg)
        k = await client.send_message(chat_id=message.from_user.id, text=f"<b><u>‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏èIMPORTANT‚ùóÔ∏èÔ∏è‚ùóÔ∏è‚ùóÔ∏è</u></b>\n\n·¥õ ú…™Íú± ·¥ç·¥è·¥†…™·¥á ÍúÄ…™ ü·¥á/·¥†…™·¥Ö·¥á·¥è ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥ <b><u><code>{get_time(DELETE_TIME)}</code></u> ü´• <i></b>(·¥Ö·¥ú·¥á ·¥õ·¥è ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ …™Íú±Íú±·¥ú·¥áÍú±)</i>.\n\n<b><i>·¥ò ü·¥á·¥ÄÍú±·¥á ÍúÄ·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú…™Íú± ÍúÄ…™ ü·¥á ·¥õ·¥è Íú±·¥è·¥ç·¥á·¥° ú·¥á Ä·¥á ·¥á üÍú±·¥á ·¥Ä…¥·¥Ö Íú±·¥õ·¥Ä Ä·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢ ·¥õ ú·¥á Ä·¥á</i></b>")
        await asyncio.sleep(DELETE_TIME)
        for x in filesarr:
            await x.delete()
        await k.edit_text("<b> è·¥è·¥ú Ä ·¥Ä ü ü ·¥†…™·¥Ö·¥á·¥èÍú±/ÍúÄ…™ ü·¥áÍú± ·¥Ä Ä·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±ÍúÄ·¥ú ü ü è !\n·¥ã…™…¥·¥Ö ü è Íú±·¥á·¥Ä Ä·¥Ñ ú ·¥Ä…¢·¥Ä…™…¥</b>")
        return
    elif data.startswith("files"):
        current_time = datetime.now(pytz.timezone(TIMEZONE))
        curr_time = current_time.hour        
        if curr_time < 12:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢  üëã" 
        elif curr_time < 17:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥  üëã" 
        elif curr_time < 21:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢  üëã"
        else:
            gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ  üëã"     
        user_id = message.from_user.id
        if temp.SHORT.get(user_id)==None:
            return await message.reply_text(text="<b>Please Search Again in Group</b>")
        else:
            chat_id = temp.SHORT.get(user_id)
        settings = await get_settings(chat_id)
        if not await db.has_premium_access(user_id) and settings['is_shortlink']: #Don't change anything without my permission @cosmic_freak
            files_ = await get_file_details(file_id)
            files = files_[0]
            g = await get_shortlink(chat_id, f"https://telegram.me/{temp.U_NAME}?start=file_{file_id}")
            k = await client.send_message(chat_id=message.from_user.id,text=f"ü´Ç  ú·¥á è {message.from_user.mention}, {gtxt}\n\n‚úÖ  è·¥è·¥ú Ä  ü…™…¥·¥ã …™Íú±  Ä·¥á·¥Ä·¥Ö è, ·¥ã…™…¥·¥Ö ü ∏ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ô·¥ú·¥õ·¥õ·¥è…¥.\n\n‚ö†Ô∏è ÍúÄ…™ ü·¥á …¥·¥Ä·¥ç·¥á : <code>{files.file_name}</code> \n\nüì• ÍúÄ…™ ü·¥á Íú±…™·¥¢·¥á : <code>{get_size(files.file_size)}</code>\n\n", reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton('üìÅ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üìÅ', url=g)
                        ], [
                            InlineKeyboardButton('‚ö°  ú·¥è·¥° ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚ö°', url=await get_tutorial(chat_id))
                        ]
                    ]
                )
            )
            await asyncio.sleep(600)
            await k.edit("<b> è·¥è·¥ú Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á …™Íú± ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö !\n·¥ã…™…¥·¥Ö ü ∏ Íú±·¥á·¥Ä Ä·¥Ñ ú ·¥Ä…¢·¥Ä…™…¥.</b>")
            return   
    user = message.from_user.id
    files_ = await get_file_details(file_id)        
    if not files_:
        pre, file_id = ((base64.urlsafe_b64decode(data + "=" * (-len(data) % 4))).decode("ascii")).split("_", 1)
        try:
            if await db.has_premium_access(message.from_user.id): 
                pass 
            else:
               if not await check_verification(client, message.from_user.id) and VERIFY == True:
                   btn = [[
                       InlineKeyboardButton("·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è ·¥†·¥á Ä…™“ì è", url=await get_token(client, message.from_user.id, f"https://telegram.me/{temp.U_NAME}?start=", file_id))
                   ],[
                        InlineKeyboardButton(" ú·¥è·¥° ·¥õ·¥è ·¥†·¥á Ä…™“ì è", url=HOW_TO_VERIFY)
                   ]]
                   l = await message.reply_text(
                       text=f"<blockquote><b> ú·¥á è  ô Ä·¥è,\n\n ‚ÄºÔ∏è  è·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥†·¥á Ä…™“ì…™·¥á·¥Ö ·¥õ·¥è·¥Ö·¥Ä è ‚ÄºÔ∏è\n\n ‚Ä∫‚Ä∫ ·¥ò ü·¥á·¥Äs·¥á ·¥†·¥á Ä…™“ì è ·¥Ä…¥·¥Ö …¢·¥á·¥õ ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥áss “ì·¥è Ä {VERIFY_EXPIRE}  ú·¥è·¥ú Äs ‚úÖ\n\n ‚Ä∫‚Ä∫ …™“ì  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥Ö…™ Ä·¥á·¥Ñ·¥õ ÍúÄ…™ ü·¥ás ·¥õ ú·¥á…¥  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥õÔøΩ.a·¥ã·¥á ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç s·¥á Ä·¥†…™·¥Ñ·¥ás.</blockquote></b>",
                       protect_content=False,
                       reply_markup=InlineKeyboardMarkup(btn)
                   )
                   await asyncio.sleep(180)
                   await l.delete()
                   return
            if STREAM_MODE:
                btn = [
                    [InlineKeyboardButton('üöÄ ÍúÄ·¥ÄÍú±·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö / ·¥°·¥Ä·¥õ·¥Ñ ú ·¥è…¥ ü…™…¥·¥á üñ•Ô∏è', callback_data=f'generate_stream_link:{file_id}')],
                    [InlineKeyboardButton('üìå ·¥ä·¥è…™…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ·¥Ñ úÔøΩ.a…¥…¥·¥á ü üìå', url=MOVIE_UPDATE_CHANNEL_LNK)]  # Keep this line unchanged
                ]
            else:
                btn = [
                    [InlineKeyboardButton('üìå ·¥ä·¥è…™…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ·¥Ñ úÔøΩ.a…¥…¥·¥á ü üìå', url=MOVIE_UPDATE_CHANNEL_LNK)]
                ]
            msg = await client.send_cached_media(
                chat_id=message.from_user.id,
                file_id=file_id,
                protect_content=True if pre == 'filep' else False,
                reply_markup=InlineKeyboardMarkup(btn))

            filetype = msg.media
            file = getattr(msg, filetype.value)
            title = ' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@') and not x.startswith('www.'), file.file_name.split()))
            size=get_size(file.file_size)
            f_caption = f"<code>{title}</code>"
            if CUSTOM_FILE_CAPTION:
                try:
                    f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='')
                except:
                    return
            await msg.edit_caption(f_caption)
            btn = [[
                InlineKeyboardButton("‚ùó …¢·¥á·¥õ ÍúÄ…™ ü·¥á ·¥Ä…¢·¥Ä…™…¥ ‚ùó", callback_data=f'delfile#{file_id}')
            ]]
            k = await msg.reply(
                f"<b><u>‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏èIMPORTANT‚ùóÔ∏èÔ∏è‚ùóÔ∏è‚ùóÔ∏è</u></b>\n\n"
                f"·¥õ ú…™Íú± ·¥ç·¥è·¥†…™·¥á ÍúÄ…™ ü·¥á/·¥†…™·¥Ö·¥á·¥è ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥ <b><u><code>{get_time(DELETE_TIME)}</code></u> ü´• <i></b>"
                "(·¥Ö·¥ú·¥á ·¥õ·¥è ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ …™Íú±Íú±·¥ú·¥áÍú±)</i>.\n\n"
                "<b><i>·¥ò ü·¥á·¥ÄÍú±·¥á ÍúÄ·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú…™Íú± ÍúÄ…™ ü·¥á ·¥õ·¥è Íú±·¥è·¥ç·¥á·¥° ú·¥á Ä·¥á ·¥á üÍú±·¥á ·¥Ä…¥·¥Ö Íú±·¥õÔøΩ.a Ä·¥õ ·¥Ö·¥è·¥°…¥ ü·¥èÔøΩ.a·¥Ö…™…¥…¢ ·¥õ ú·¥á Ä·¥á</i></b>",
                quote=True
            )
            await asyncio.sleep(DELETE_TIME)
            await msg.delete()
            await k.edit_text("<b> è·¥è·¥ú Ä ·¥†…™·¥Ö·¥á·¥è / ÍúÄ…™ ü·¥á …™Íú± Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±ÍúÄ·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö !!</b>")
            return
        except:
            pass
        return await message.reply('…¥·¥è Íú±·¥ú·¥Ñ ú ÍúÄ…™ ü·¥á ·¥áx…™Íú±·¥õÍú± !')
    
    files = files_[0]
    title = ' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@') and not x.startswith('www.'), files.file_name.split()))
    size = get_size(files.file_size)
    f_caption = files.caption

    if CUSTOM_FILE_CAPTION:
        try:
            f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='' if f_caption is None else f_caption)
        except Exception as e:
            logger.exception(e)
            f_caption = f_caption

    if f_caption is None:
        f_caption = ' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@') and not x.startswith('www.'), files.file_name.split()))

    if await db.has_premium_access(message.from_user.id):
        pass
    else:
        if not await check_verification(client, message.from_user.id) and VERIFY == True:
            btn = [[
              InlineKeyboardButton("·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è ·¥†·¥á Ä…™“ì è", url=await get_token(client, message.from_user.id, f"https://telegram.me/{temp.U_NAME}?start=", file_id))
           ],[
              InlineKeyboardButton(" ú·¥è·¥° ·¥õ·¥è ·¥†·¥á Ä…™“ì è", url=HOW_TO_VERIFY)
           ]]
            l = await message.reply_text(
                text=f"<blockquote><b> ú·¥á è  ô Ä·¥è,\n\n ‚ÄºÔ∏è  è·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥†·¥á Ä…™“ì…™·¥á·¥Ö ·¥õ·¥è·¥ÖÔøΩ.a è ‚ÄºÔ∏è\n\n ‚Ä∫‚Ä∫ ·¥ò ü·¥áÔøΩ.aÍú±·¥á ·¥†·¥á Ä…™“ì è ·¥Ä…¥·¥Ö …¢·¥á·¥õ ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥áÍú±Íú± “ì·¥è Ä {VERIFY_EXPIRE}  ú·¥è·¥ú ÄÍú± ‚úÖ\n\n ‚Ä∫‚Ä∫ …™“ì  è·¥è·¥ú ·¥°ÔøΩ.a…¥·¥õ ·¥Ö…™ Ä·¥á·¥Ñ·¥õ ÍúÄ…™ ü·¥áÍú± ·¥õ ú·¥á…¥  è·¥è·¥ú ·¥ÑÔøΩ.a…¥ ·¥õÔøΩ.a·¥ã·¥á ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç Íú±·¥á Ä·¥†…™·¥Ñ·¥áÍú±.</blockquote></b>",
                protect_content=False,
                reply_markup=InlineKeyboardMarkup(btn)
            )
            await asyncio.sleep(180)
            await l.delete()
            return
    if STREAM_MODE:
        btn = [
            [InlineKeyboardButton('üöÄ ÍúÄ·¥ÄÍú±·¥õ ·¥Ö·¥è·¥°…¥ ü·¥èÔøΩ.a·¥Ö / ·¥°ÔøΩ.a·¥õ·¥Ñ ú ·¥è…¥ ü…™…¥·¥á üñ•Ô∏è', callback_data=f'generate_stream_link:{file_id}')],
            [InlineKeyboardButton('üìå ·¥ä·¥è…™…¥ ·¥ú·¥ò·¥ÖÔøΩ.a·¥õ·¥áÍú± ·¥Ñ úÔøΩ.a…¥…¥·¥á ü üìå', url=MOVIE_UPDATE_CHANNEL_LNK)]  # Keep this line unchanged
        ]
    else:
        btn = [
            [InlineKeyboardButton('üìå ·¥ä·¥è…™…¥ ·¥ú·¥ò·¥ÖÔøΩ.a·¥õ·¥áÍú± ·¥Ñ úÔøΩ.a…¥…¥·¥á ü üìå', url=MOVIE_UPDATE_CHANNEL_LNK)]
        ]
    msg = await client.send_cached_media(
        chat_id=message.from_user.id,
        file_id=file_id,
        caption=f_caption,
        protect_content=True if pre == 'filep' else False,
        reply_markup=InlineKeyboardMarkup(btn)
    )
    btn = [[
            InlineKeyboardButton("‚ùó …¢·¥á·¥õ ÍúÄ…™ ü·¥á ·¥Ä…¢ÔøΩ.a…™…¥ ‚ùó", callback_data=f'delfile#{file_id}')
        ]]
    k = await msg.reply(
        f"<b><u>‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏èIMPORTANT‚ùóÔ∏èÔ∏è‚ùóÔ∏è‚ùóÔ∏è</u></b>\n\n"
        f"·¥õ ú…™Íú± ·¥ç·¥è·¥†…™·¥á ÍúÄ…™ ü·¥á/·¥†…™·¥Ö·¥á·¥è ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥ <b><u><code>{get_time(DELETE_TIME)}</code></u> ü´• <i></b>"
        "(·¥Ö·¥ú·¥á ·¥õ·¥è ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ …™Íú±Íú±·¥ú·¥áÍú±)</i>.\n\n"
        "<b><i>·¥ò ü·¥áÔøΩ.aÍú±·¥á ÍúÄ·¥è Ä·¥°ÔøΩ.a Ä·¥Ö ·¥õ ú…™Íú± ÍúÄ…™ ü·¥á ·¥õ·¥è Íú±·¥è·¥ç·¥á·¥° ú·¥á Ä·¥á ·¥á üÍú±·¥á ÔøΩ.a…¥·¥Ö Íú±·¥õÔøΩ.a Ä·¥õ ·¥Ö·¥è·¥°…¥ ü·¥èÔøΩ.a·¥Ö…™…¥…¢ ·¥õ ú·¥á Ä·¥á</i></b>",
        quote=True
    )     
    await asyncio.sleep(DELETE_TIME)
    await msg.delete()
    await k.edit_text("<b> è·¥è·¥ú Ä ·¥†…™·¥Ö·¥á·¥è / ÍúÄ…™ ü·¥á …™Íú± Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±ÍúÄ·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö !!</b>")
    return
